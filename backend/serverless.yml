service: transcription-app-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  timeout: 30
  memorySize: 256
  
  # Variables de entorno para todas las Lambdas
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
    DYNAMODB_TRANSCRIPTIONS_TABLE: ${self:custom.transcriptionsTable}
    S3_BUCKET: ${self:custom.s3Bucket}
    SPEECHMATICS_API_KEY: ${env:SPEECHMATICS_API_KEY, ''}
  
  # Permisos IAM para las Lambdas
  iam:
    role:
      statements:
        # Permisos para Cognito
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminConfirmSignUp
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminRespondToAuthChallenge
            - cognito-idp:GetUser
            - cognito-idp:InitiateAuth
            - cognito-idp:RespondToAuthChallenge
            - cognito-idp:ConfirmSignUp
            - cognito-idp:ForgotPassword
            - cognito-idp:ConfirmForgotPassword
          Resource: !GetAtt CognitoUserPool.Arn
        
        # Permisos para DynamoDB
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt TranscriptionsTable.Arn
            - !Sub "${TranscriptionsTable.Arn}/index/*"
        
        # Permisos para S3
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:PutObjectAcl
          Resource: !Sub "arn:aws:s3:::${self:custom.s3Bucket}/*"
        
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource: !Sub "arn:aws:s3:::${self:custom.s3Bucket}"

# Variables personalizadas
custom:
  # Nombres de recursos dinámicos
  transcriptionsTable: transcriptions-${self:provider.stage}
  s3Bucket: transcriptionaudio${self:provider.stage}antonio2025
  
  # Configuración de esbuild para TypeScript
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    target: node18
    platform: node
    concurrency: 10

# Plugins
plugins:
  - serverless-dotenv-plugin
  - serverless-esbuild
  - serverless-offline

# Funciones Lambda
functions:
  # === AUTENTICACIÓN ===
  authRegister:
    handler: src/functions/auth.register
    events:
      - http:
          path: auth/register
          method: post
          cors: true
  
  authLogin:
    handler: src/functions/auth.login
    events:
      - http:
          path: auth/login
          method: post
          cors: true
  
  authLogout:
    handler: src/functions/auth.logout
    events:
      - http:
          path: auth/logout
          method: post
          cors: true
  
  authRefresh:
    handler: src/functions/auth.refreshToken
    events:
      - http:
          path: auth/refresh
          method: post
          cors: true
  
  authConfirm:
    handler: src/functions/auth.confirmSignUp
    events:
      - http:
          path: auth/confirm
          method: post
          cors: true
  
  authMe:
    handler: src/functions/auth.me
    events:
      - http:
          path: auth/me
          method: get
          cors: true

  # === TRANSCRIPCIONES ===
  getUploadUrl:
    handler: src/functions/transcriptions.getUploadUrl
    events:
      - http:
          path: transcriptions/upload-url
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer

  processTranscription:
    handler: src/functions/transcriptions.processTranscription
    timeout: 300 # 5 minutos para el proceso de transcripción
    events:
      - http:
          path: transcriptions/{transcriptionId}/process
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer

  getTranscription:
    handler: src/functions/transcriptions.getTranscription
    events:
      - http:
          path: transcriptions/{transcriptionId}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer

  listTranscriptions:
    handler: src/functions/transcriptions.listTranscriptions
    events:
      - http:
          path: transcriptions
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer

  getDownloadUrl:
    handler: src/functions/transcriptions.getDownloadUrl
    events:
      - http:
          path: transcriptions/{transcriptionId}/download
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer

  createRealtimeTranscription:
    handler: src/functions/transcriptions.createRealtimeTranscription
    events:
      - http:
          path: transcriptions/realtime
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer

# Recursos AWS (IaC)
resources:
  Resources:
    # === COGNITO USER POOL ===
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: transcription-users-${self:provider.stage}
        UsernameConfiguration:
          CaseSensitive: false
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
        MfaConfiguration: OFF
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: name
            AttributeDataType: String
            Required: false
            Mutable: true
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
          EmailSubject: "Confirma tu cuenta en Transcription App"
          EmailMessage: "Tu código de confirmación es {####}"

    # === COGNITO USER POOL CLIENT ===
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: transcription-client-${self:provider.stage}
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
        GenerateSecret: false
        PreventUserExistenceErrors: ENABLED
        SupportedIdentityProviders:
          - COGNITO
        CallbackURLs:
          - http://localhost:3000/dashboard
          - https://transcription-app.com/dashboard
        LogoutURLs:
          - http://localhost:3000
          - https://transcription-app.com
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        AllowedOAuthFlowsUserPoolClient: true

    # === DYNAMODB TABLE ===
    TranscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.transcriptionsTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: transcriptionId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: transcriptionId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserDateIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    # === S3 BUCKET ===
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        VersioningConfiguration:
          Status: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldFiles
              Status: Enabled
              ExpirationInDays: 30

    # === COGNITO AUTHORIZER ===
    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer-${self:provider.stage}-v2
        Type: COGNITO_USER_POOLS
        RestApiId: !Ref ApiGatewayRestApi
        ProviderARNs:
          - !GetAtt CognitoUserPool.Arn
        IdentitySource: method.request.header.Authorization

    # === GATEWAY RESPONSES FOR CORS ===
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseTemplates:
          application/json: |
            {"message": $context.error.messageString}

  # Outputs para usar en frontend
  Outputs:
    CognitoUserPoolId:
      Description: "Cognito User Pool ID"
      Value: !Ref CognitoUserPool
      Export:
        Name: ${self:service}-${self:provider.stage}-cognito-user-pool-id
    
    CognitoUserPoolClientId:
      Description: "Cognito User Pool Client ID"
      Value: !Ref CognitoUserPoolClient
      Export:
        Name: ${self:service}-${self:provider.stage}-cognito-client-id
    
    ApiGatewayRestApiUrl:
      Description: "API Gateway URL"
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-api-url
    
    S3BucketName:
      Description: "S3 Bucket for audio files"
      Value: !Ref S3Bucket
      Export:
        Name: ${self:service}-${self:provider.stage}-s3-bucket 